#!/usr/bin/env node

/**
 * Setup script for NFT Marketplace environment configuration
 * This script helps configure environment variables interactively
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const envPath = path.join(__dirname, '..', '.env');

// Default environment template
const envTemplate = {
  // Blockchain Configuration
  'NEXT_PUBLIC_CONTRACT_ADDRESS': {
    description: 'Deployed NFT contract address',
    default: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b7',
    required: true
  },
  'NEXT_PUBLIC_CHAIN_ID': {
    description: 'Blockchain chain ID (80002 for Polygon Amoy)',
    default: '80002',
    required: true
  },
  'NEXT_PUBLIC_NETWORK_NAME': {
    description: 'Network name',
    default: 'Polygon Amoy',
    required: true
  },
  'NEXT_PUBLIC_RPC_URL': {
    description: 'RPC URL for blockchain connection',
    default: 'https://rpc-amoy.polygon.technology/',
    required: true
  },
  'NEXT_PUBLIC_BLOCK_EXPLORER': {
    description: 'Block explorer URL',
    default: 'https://amoy.polygonscan.com/',
    required: true
  },

  // IPFS Configuration
  'NEXT_PUBLIC_PINATA_API_KEY': {
    description: 'Pinata API Key for IPFS uploads',
    default: '',
    required: false,
    sensitive: true
  },
  'NEXT_PUBLIC_PINATA_SECRET_KEY': {
    description: 'Pinata Secret Key',
    default: '',
    required: false,
    sensitive: true
  },
  'NEXT_PUBLIC_PINATA_JWT': {
    description: 'Pinata JWT Token (recommended over API key)',
    default: '',
    required: false,
    sensitive: true
  },
  'NEXT_PUBLIC_IPFS_GATEWAY': {
    description: 'IPFS Gateway URL',
    default: 'https://gateway.pinata.cloud/ipfs/',
    required: true
  },

  // Firebase Configuration
  'NEXT_PUBLIC_FIREBASE_API_KEY': {
    description: 'Firebase API Key',
    default: '',
    required: false,
    sensitive: true
  },
  'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN': {
    description: 'Firebase Auth Domain',
    default: '',
    required: false
  },
  'NEXT_PUBLIC_FIREBASE_PROJECT_ID': {
    description: 'Firebase Project ID',
    default: '',
    required: false
  },
  'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET': {
    description: 'Firebase Storage Bucket',
    default: '',
    required: false
  },
  'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID': {
    description: 'Firebase Messaging Sender ID',
    default: '',
    required: false
  },
  'NEXT_PUBLIC_FIREBASE_APP_ID': {
    description: 'Firebase App ID',
    default: '',
    required: false
  },

  // Optional Services
  'NEXT_PUBLIC_MORALIS_API_KEY': {
    description: 'Moralis v2 API Key (optional)',
    default: '',
    required: false,
    sensitive: true
  },
  // The Graph removed - using Moralis instead
  'NEXT_PUBLIC_APP_URL': {
    description: 'Application URL',
    default: 'http://localhost:3000',
    required: true
  }
};

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupEnvironment() {
  console.log('üöÄ NFT Marketplace Environment Setup');
  console.log('=====================================\n');

  const envVars = {};

  // Check if .env already exists
  if (fs.existsSync(envPath)) {
    const overwrite = await question('‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('Please provide the following configuration values:\n');

  for (const [key, config] of Object.entries(envTemplate)) {
    const requiredText = config.required ? ' (required)' : ' (optional)';
    const defaultText = config.default ? ` [${config.default}]` : '';
    
    let prompt = `${config.description}${requiredText}${defaultText}: `;
    
    if (config.sensitive) {
      prompt = `üîê ${prompt}`;
    }

    const value = await question(prompt);
    envVars[key] = value || config.default || '';

    if (config.required && !envVars[key]) {
      console.log('‚ùå This field is required!');
      process.exit(1);
    }
  }

  // Generate .env content
  let envContent = '# NFT Marketplace Environment Configuration\n';
  envContent += '# Generated by setup script\n\n';

  // Group by category
  const categories = {
    'Blockchain Configuration': [
      'NEXT_PUBLIC_CONTRACT_ADDRESS',
      'NEXT_PUBLIC_CHAIN_ID', 
      'NEXT_PUBLIC_NETWORK_NAME',
      'NEXT_PUBLIC_RPC_URL',
      'NEXT_PUBLIC_BLOCK_EXPLORER'
    ],
    'IPFS Configuration': [
      'NEXT_PUBLIC_PINATA_API_KEY',
      'NEXT_PUBLIC_PINATA_SECRET_KEY',
      'NEXT_PUBLIC_PINATA_JWT',
      'NEXT_PUBLIC_IPFS_GATEWAY'
    ],
    'Firebase Configuration': [
      'NEXT_PUBLIC_FIREBASE_API_KEY',
      'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN',
      'NEXT_PUBLIC_FIREBASE_PROJECT_ID',
      'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET',
      'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID',
      'NEXT_PUBLIC_FIREBASE_APP_ID'
    ],
    'Optional Services': [
      'NEXT_PUBLIC_MORALIS_API_KEY',
      'NEXT_PUBLIC_GRAPH_API_URL',
      'NEXT_PUBLIC_APP_URL'
    ]
  };

  for (const [category, keys] of Object.entries(categories)) {
    envContent += `# ${category}\n`;
    for (const key of keys) {
      if (envVars[key]) {
        envContent += `${key}=${envVars[key]}\n`;
      }
    }
    envContent += '\n';
  }

  // Write .env file
  fs.writeFileSync(envPath, envContent);

  console.log('\n‚úÖ Environment configuration completed!');
  console.log(`üìÅ Configuration saved to: ${envPath}`);
  console.log('\nüìã Next steps:');
  console.log('1. Review the generated .env file');
  console.log('2. Deploy your smart contract and update CONTRACT_ADDRESS');
  console.log('3. Run: npm run dev');
  console.log('\nüìñ For detailed setup instructions, see: NFT_FLOWS_DOCUMENTATION.md');

  rl.close();
}

// Run setup
setupEnvironment().catch(console.error);
